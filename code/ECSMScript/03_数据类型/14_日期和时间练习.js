
// -------------------------------------------------------------------------------------------



// 创建日期

// 创建一个 Date 对象，日期是：Feb 20, 2012, 3:12am。时区是当地时区。

// 使用 consloe.log 显示结果。

// new Date 构造函数默认使用本地时区。所以唯一需要牢记的就是月份从 0 开始计数。

// 所以二月对应的数值是 1。

// 这是一个以数字作为日期参数的示例：

// new Date(year, month, date, hour, minute, second, millisecond)
let d1 = new Date(2012, 1, 20, 3, 12);
console.log( d1 ); // 2012-02-19T19:12:00.000Z

// 我们还可以从字符串创建日期，像这样：
// new Date(datastring)
let d2 = new Date("February 20, 2012 03:12:00");
console.log( d2 ); // 2012-02-19T19:12:00.000Z



// -------------------------------------------------------------------------------------------




// 显示星期数

// 编写一个函数 getWeekDay(date) 以短格式来显示一个日期的星期数：
    //- ‘MO’，‘TU’，‘WE’，‘TH’，‘FR’，‘SA’，‘SU’。

// 例如：
let date = new Date(2021, 0, 23);  
console.log(date);
console.log(date.getDay());
console.log( getWeekDay(date) ); 

function getWeekDay(date) {
    return ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'][date.getDay() - 1 == 0 ? date.getDay() - 1 : 6];
}




// -------------------------------------------------------------------------------------------




// 许多天之前是哪个月几号？

// 写一个函数 getDateAgo(date, days)，返回特定日期 date 往前 days 天是哪个月的哪一天。

// 例如，假设今天是 20 号，那么 getDateAgo(new Date(), 1) 的结果应该是 19 号，
//  getDateAgo(new Date(), 2) 的结果应该是 18 号。

// 跨月、年也应该是正确输出：
date = new Date(2015, 0, 2);

console.log( getDateAgo(date, 1) ); // 1, (1 Jan 2015)
console.log( getDateAgo(date, 2) ); // 31, (31 Dec 2014)
console.log( getDateAgo(date, 365) ); // 2, (2 Jan 2014)

// P.S. 函数不应该修改给定的 date 值。

function getDateAgo(date, days) {
    
}



// -------------------------------------------------------------------------------------------










// -------------------------------------------------------------------------------------------







// -------------------------------------------------------------------------------------------








// -------------------------------------------------------------------------------------------
