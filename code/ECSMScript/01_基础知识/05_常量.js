// 常量


// 声明一个常数（不变）变量，可以使用 const 而非 let：
const PI = '3.14';

// 使用 const 声明的变量称为“常量”。它们不能被修改，如果你尝试修改就会发现报错：
// PI = '3.15'; // TypeError: Assignment to constant variable.



/**
    大写形式的常数
        一个普遍的做法是将常量用作别名，以便记住那些在执行之前就已知的难以记住的值。
        使用大写字母和下划线来命名这些常量。

        作为一个“常数”，意味着值永远不变。但是有些常量在执行之前就已知了（比如红色的十六进制值），
        还有些在执行期间被“计算”出来，但初始赋值之后就不会改变。


        作为一个“常数”，意味着值永远不变。但是有些常量在执行之前就已知了（比如红色的十六进制值），
        还有些在执行期间被“计算”出来，但初始赋值之后就不会改变。


        总结
            我们可以使用 var、let 或 const 声明变量来存储数据。
            let — 现代的变量声明方式。
            var — 老旧的变量声明方式。一般情况下，我们不会再使用它。但是，我们会在 旧时的 "var" 章节介绍 var 和 let 的微妙差别，以防你需要它们。
            const — 类似于 let，但是变量的值无法被修改。
            变量应当以一种容易理解变量内部是什么的方式进行命名。
 */


// const BIRTHDAY = '18.04.1982'; // 使用大写？
BIRTHDAY = '18.04.1982';
const AGE = someCode(BIRTHDAY); // 使用大写？
function someCode(BIRTHDAY) {
    return BIRTHDAY;
}
console.log(`AGE: ${AGE}`);

// 我们通常用大写字母表示“硬编码（hard-coded）”的常量。或者，换句话说就是，当值在执行之前或在被写入代码的时候，我们就知道值是什么了。
// 在这个代码中 birthday 确实是这样的。因此我们可以使用大写。
// 在对照组中，age 是在程序运行时计算出的。今天我们有一个年龄，一年以后我们就会有另一个。
// 它在某种意义上不会随着代码的执行而改变。但与 birthday 相比，它还是有一定的可变性：
// 它是计算出来的，因此我们应该使用小写。

